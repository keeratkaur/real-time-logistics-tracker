# Real-Time Logistics Tracker - Requirements
# Full-Stack Application Dependencies

## Project Overview
Real-time logistics tracking application with React frontend and Node.js WebSocket backend.
Features: Live driver tracking, interactive maps, optimistic UI updates, and comprehensive state management.

## Frontend Dependencies (React/TypeScript)

### Core React Dependencies
react==19.1.0
react-dom==19.1.0
react-scripts==5.0.1

### State Management
@reduxjs/toolkit==2.8.2
react-redux==9.2.0

### Mapping & Visualization
leaflet==1.9.4
react-leaflet==5.0.0

### UI & Styling
styled-components==6.1.19
@emotion/react==11.14.0
@emotion/styled==11.14.1
@mui/material==7.2.0
@mui/icons-material==7.2.0

### TypeScript & Development
typescript==4.9.5
@types/react==19.1.8
@types/react-dom==19.1.6
@types/node==16.18.126
@types/jest==27.5.2
@types/leaflet==1.9.19
@types/styled-components==5.1.34

### Testing
@testing-library/react==16.3.0
@testing-library/dom==10.4.0
@testing-library/jest-dom==6.6.3
@testing-library/user-event==13.5.0

### Performance & Monitoring
web-vitals==2.1.4

## Backend Dependencies (Node.js)

### Core Server
ws==8.18.3

### Development Tools
nodemon==3.1.10

## System Requirements

### Node.js
- Version: 16.x or higher
- Recommended: 18.x LTS

### Browser Support
- Chrome: Latest 2 versions
- Firefox: Latest 2 versions
- Safari: Latest 2 versions
- Edge: Latest 2 versions

### Operating System
- Windows 10/11
- macOS 10.15+
- Linux (Ubuntu 18.04+, CentOS 7+)

## Development Environment Setup

### Prerequisites
1. Node.js and npm installed
2. Git for version control
3. Code editor (VS Code recommended)

### Installation Commands
```bash
# Install frontend dependencies
cd real-time-tracker
npm install

# Install backend dependencies
cd ../server
npm install

# Install root dependencies (if any)
cd ..
npm install
```

### Running the Application
```bash
# Start backend server (Terminal 1)
cd server
npm start

# Start frontend development server (Terminal 2)
cd real-time-tracker
npm start
```

## External Services & APIs

### Map Services
- OpenStreetMap (Nominatim API) - For reverse geocoding
- Leaflet Map Tiles - For map rendering

### WebSocket
- Local WebSocket server on port 8080
- Real-time driver data streaming

## Build & Deployment

### Production Build
```bash
# Frontend build
cd real-time-tracker
npm run build

# Backend (no build step required)
cd ../server
npm start
```

### Environment Variables
- NODE_ENV=production (for production builds)
- REACT_APP_WS_URL (optional, defaults to ws://localhost:8080)

## Security Considerations
- WebSocket connection validation
- Input sanitization for search queries
- CORS configuration for production
- Rate limiting for geocoding API calls

## Performance Requirements
- WebSocket reconnection: 3-second intervals
- Map updates: Every 2.5 seconds
- Optimistic UI updates: Immediate feedback
- Retry mechanism: Up to 3 attempts for failed actions

## Browser Compatibility
- Modern browsers with ES6+ support
- WebSocket API support required
- Geolocation API (optional, for user location)

## Network Requirements
- Stable internet connection for map tiles
- WebSocket connection to backend server
- Access to OpenStreetMap Nominatim API

## Development Tools
- Redux DevTools (enabled in development)
- React Developer Tools
- WebSocket debugging tools
- Browser developer tools

## Testing
- Unit tests with Jest and React Testing Library
- Integration tests for Redux store
- Manual testing for WebSocket functionality
- Cross-browser compatibility testing

## Monitoring & Analytics
- Web Vitals for performance monitoring
- Console logging for debugging
- Redux action history tracking
- WebSocket connection status monitoring 